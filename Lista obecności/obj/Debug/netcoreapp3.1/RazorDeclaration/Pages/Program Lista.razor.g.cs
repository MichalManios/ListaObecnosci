#pragma checksum "C:\To Publish\Gotowe\Lista obecności\Lista obecności\Pages\Program Lista.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8ea0194a25eaaddcf899cb26391c4e7cf047bf59"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Lista_obecności.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\_Imports.razor"
using Lista_obecności.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\Pages\Program Lista.razor"
using Lista_obecności.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\Pages\Program Lista.razor"
using Lista_obecności.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\Pages\Program Lista.razor"
using Lista_obecności;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/lista")]
    public partial class Program_Lista : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 333 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\Pages\Program Lista.razor"
       


    List<int> iRedDays = new List<int>();

    int iSetMonth = DateTime.Now.Month - 1;
    int iSetYear = DateTime.Now.Year - 2020;

    string SetCalendarMonth()
    {
        string sMonth = "";
        if (string.IsNullOrEmpty(month)) month = DateTime.Now.Month.ToString();
        switch (Convert.ToInt32(month))
        {

            case 1: sMonth = "STYCZEŃ"; break;
            case 2: sMonth = "LUTY"; break;
            case 3: sMonth = "MARZEC"; break;
            case 4: sMonth = "KWIECIEŃ"; break;
            case 5: sMonth = "MAJ"; break;
            case 6: sMonth = "CZERWIEC"; break;
            case 7: sMonth = "LIPIEC"; break;
            case 8: sMonth = "SIERPIEŃ"; break;
            case 9: sMonth = "WRZESIEŃ"; break;
            case 10: sMonth = "PAŹDZiERNIK"; break;
            case 11: sMonth = "LISTOPAD"; break;
            case 12: sMonth = "GRUDZIEŃ"; break;
        }
        return sMonth;
    }

    int iStartDating = 0;
    int iDayInMonth = 0;

    int DrawCalendar()
    {
        int Month;
        int Year;
        if (string.IsNullOrEmpty(month)) Month = DateTime.Today.Month;
        else Month = Convert.ToInt32(month);
        if (string.IsNullOrEmpty(year)) Year = DateTime.Today.Year;
        else Year = Convert.ToInt32(year);
        var firstDayOfMonth = new DateTime(Year, Month, 1);
        string sDayOfWeek = firstDayOfMonth.DayOfWeek.ToString();
        int iStartDating = 0;

        if (sDayOfWeek == "Monday") iStartDating = 1;
        if (sDayOfWeek == "Tuesday") iStartDating = 2;
        if (sDayOfWeek == "Wednesday") iStartDating = 3;
        if (sDayOfWeek == "Thursday") iStartDating = 4;
        if (sDayOfWeek == "Friday") iStartDating = 5;
        if (sDayOfWeek == "Saturday") iStartDating = 6;
        if (sDayOfWeek == "Sunday") iStartDating = 7;

        iDayInMonth = DateTime.DaysInMonth(Year, Month);

        return iStartDating;
    }

    List<string> sections;

    List<WorkersDTO> workers, allWorkers;
    int i = 0;

    List<FreeDaysDTO> freeDays;

    void GetFreeDays()
    {
        var free = iApplicationManager.GetAllFreeDays();
        freeDays = free.OrderBy(x => x.Month).ThenBy(x => x.Day).ToList();
    }


    int y;
    int count = 16;

    protected override void OnInitialized()
    {
        GetFreeDays();
        sections = iApplicationManager.GetAllSectionOfWorkers().OrderBy(x => x).ToList();
        if (sections.Count > 0)
        {
            if (string.IsNullOrEmpty(SelectedSection))
            {
                SelectedSection = sections[0];
            }

            workers = iApplicationManager.GetAllWorkers(SelectedSection).OrderByDescending(x => x.IsManager).ThenBy(x => x.Surname).ThenBy(x => x.Name).ToList();
            y = workers.Count;
            if (workers.Count < 16) y = 16 - y;
            count = workers.Count;
            DrawEmptyRowsInWorkersTable();
        }
        else y = 16;
    }

    void DeleteWorker(int Id)
    {
        WorkersDTO workersDTO = iApplicationManager.GetAllWorkers(null).Where(x => x.Id == Id).FirstOrDefault();
        iApplicationManager.DeleteWorker(workersDTO);
        navigationManager.NavigateTo("/lista", true);
    }

    void DrawEmptyRowsInWorkersTable()
    {
        y = workers.Count;
        if (workers.Count < 16)
        {
            y = 16 - y;
            for (int i = 0; i < y; i++)
            {
                workers.Add(new WorkersDTO
                {
                    Name = "",
                    Section = "",
                    Surname = ""
                });

            }
        }
    }

    string SelectedSection = "";
    void ChangeSection(ChangeEventArgs e)
    {
        var index = e.Value.ToString();
        SelectedSection = sections[Convert.ToInt32(index)];
        //workers = iApplicationManager.GetAllWorkers(SelectedSection).ToList();
        workers = iApplicationManager.GetAllWorkers(SelectedSection).OrderByDescending(x => x.IsManager).ThenBy(x => x.Surname).ThenBy(x => x.Name).ToList();
        DrawEmptyRowsInWorkersTable();
    }

    List<int> HolidayDay = new List<int>();
    string month = "";
    string year = "";
    void CalendarMonth(ChangeEventArgs e)
    {
        HolidayDay.Clear();
        month = (Convert.ToInt32(e.Value) + 1).ToString();
        if (freeDays != null)
            foreach (var freeDay in freeDays)
            {
                if (freeDay.Month.ToString() == month) HolidayDay.Add(freeDay.Day);
            }
        DrawEmptyRowsInWorkersTable();
    }

    void CalendarYear(ChangeEventArgs e)
    {

        year = (Convert.ToInt32(e.Value) + 2020).ToString();
        DrawEmptyRowsInWorkersTable();
    }

    string IndexOfWorkerToEdit;

    string EditWorker(int IdWorker)
    {
        return IndexOfWorkerToEdit = IdWorker.ToString();
    }

    bool printAllSection = false;

    void ChangeStateOfPrinting()
    {
        if (printAllSection == false) printAllSection = true;
        else printAllSection = false;
    }

    Print print = new Print();

    List<WorkersDTO> GetAllWorkers()
    {
        return allWorkers = iApplicationManager.GetAllWorkers(null).ToList();
    }

    //ze 111
    /*if (i == count - 1)
                                        {

                                            for (int a = 0; a < y; a++)
                                            {

                                                <tr class="msgRow" onclick="selectRow(this)">
                                                    <td> </td>
                                                    <td> </td>
                                                    <td> </td>
                                                    <td> </td>
                                                </tr>
                                            }


                                        }
    */

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IApplicationManager iApplicationManager { get; set; }
    }
}
#pragma warning restore 1591
