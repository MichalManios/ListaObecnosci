#pragma checksum "C:\To Publish\Gotowe\Lista obecności\Lista obecności\Pages\AdminManage.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b6623ec2f419b1063fe2361c849c33a6274633f8"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Lista_obecności.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\_Imports.razor"
using Lista_obecności.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\Pages\AdminManage.razor"
using Lista_obecności.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\Pages\AdminManage.razor"
using Lista_obecności.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\Pages\AdminManage.razor"
using Lista_obecności;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\Pages\AdminManage.razor"
using Lista_obecności;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\Pages\AdminManage.razor"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\Pages\AdminManage.razor"
using System.Threading.Tasks;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\Pages\AdminManage.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\Pages\AdminManage.razor"
using System.Runtime.Serialization.Formatters.Binary;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\Pages\AdminManage.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/AdminManage")]
    public partial class AdminManage : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 215 "C:\To Publish\Gotowe\Lista obecności\Lista obecności\Pages\AdminManage.razor"
       
    public bool bRola = false;
    public bool bPassword = false;
    Roles role = new Roles();
    public string sUser = "";
    IdentityUser User = new IdentityUser();
    public string sUserName = "";
    public string sUserRole = "";
    public string sUserRoleToChange = "";
    public string sPasswordToChange = "";
    string sAlert = "";
    bool bAlert = false;
    bool bAnyChanges = false;
    bool bMustBeAUser = false;
    bool bClick = false;
    bool bBase = false;

    protected override void OnInitialized()
    {
        sUser = "";
        sUserName = "";
        sUserRole = "";
        sAlert = "";
        sUserRoleToChange = "";
        sPasswordToChange = "";
        var worker = iApplicationManager.GetAllWorkers(null).ToList();
        if (worker.Count == 0) bBase = false;
        else bBase = true;
        worker = null;
    }

    void SetRola()
    {
        bRola = true;
        bPassword = false;
        bClick = true;
    }

    void SetPassword()
    {
        bPassword = true;
        bRola = false;
        bClick = true;
    }

    async Task FindUser()
    {
        var UserToFind = await userManager.FindByNameAsync(sUser);

        if (UserToFind != null)
        {
            User = UserToFind;
            sUserName = UserToFind.UserName;
            var roleId = await userManager.GetRolesAsync(UserToFind);
            sUserRole = roleId[0];
            bAlert = false;
            bAnyChanges = true;
            bPassword = false;
            bRola = false;
            bMustBeAUser = true;
        }
        else
        {
            User = null;
            sUserName = "";
            sUserRole = "";
            bAnyChanges = false;
            bMustBeAUser = false;
            bAlert = true;
            sAlert = "Nie znaleziono użytkownika o nazwie: " + sUser + "!!!";
        }
        sUser = "";
    }

    async Task ChangeRole()
    {
        if (sUserRoleToChange != sUserRole)
        {
            var RoleResult = await roleManager.FindByNameAsync(sUserRoleToChange);
            if (RoleResult == null)
            {
                // Create
                await roleManager.CreateAsync(new IdentityRole(sUserRoleToChange));
            }
            await userManager.RemoveFromRoleAsync(User, sUserRole);
            await userManager.AddToRoleAsync(User, sUserRoleToChange);
            User = null;
            sUserName = "";
            sUserRole = "";
            bAnyChanges = false;
            bMustBeAUser = false;
            navigationManager.NavigateTo("/AdminManage", true);
        }
    }

    async Task ChangePassword()
    {
        //var currentPassword = userManager.PasswordHasher;
        //await userManager.ChangePasswordAsync(User, User., sPasswordToChange);
        var user = await userManager.FindByNameAsync(sUserName);
        if (user != null)
        {
            user.PasswordHash = userManager.PasswordHasher.HashPassword(user, sPasswordToChange);
            var result = await userManager.UpdateAsync(user);
            if (result.Succeeded)
            {
                User = null;
                sUserName = "";
                sUserRole = "";
                bAnyChanges = false;
                bMustBeAUser = false;
                navigationManager.NavigateTo("/AdminManage", true);
            }
        }
    }

    void SetRole(ChangeEventArgs e)
    {
        var index = e.Value.ToString();
        if (index == "0") sUserRoleToChange = "guest";
        if (index == "1") sUserRoleToChange = "user";
        if (index == "2") sUserRoleToChange = "admin";
    }

    void LoadBase()
    {
        ListOfWorkers listOfWorkers = new ListOfWorkers();
        string workersPath = Environment.CurrentDirectory + "\\List_of_workers.dat";
        if (File.Exists(workersPath))
        {
            using (Stream input = File.OpenRead("List_of_workers.dat"))
            {
                BinaryFormatter formatter = new BinaryFormatter();
                listOfWorkers = (ListOfWorkers)formatter.Deserialize(input);
            }
        }

        for (int i = 0; i < listOfWorkers.Id.Count; i++)
        {
            WorkersDTO worker = new WorkersDTO()
            {
                Id = listOfWorkers.Id[i],
                Name = listOfWorkers.Imie[i],
                Surname = listOfWorkers.Nazwisko[i],
                Section = listOfWorkers.Dzial[i],
                IsManager = false
            };
            iApplicationManager.AddNewWorker(worker);
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private RoleManager<IdentityRole> roleManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IApplicationManager iApplicationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserManager<IdentityUser> userManager { get; set; }
    }
}
#pragma warning restore 1591
